(stop-dev)
(refresh)
(start-dev)
(samplepost)
(stop-dev)
(refresh)
(samplepost)
(stop-dev)
(refresh)
(resetform)
(resetpost)
(refresh)
(resetform)
(resetpost)
(refresh)
(start-dev)
(refresh)
(start-dev)
(stop-dev)
(dev)
(start-dev)
(assoc {})
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(resetpost)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
api/database
(resetpost)
(stop-dev)
(exit)
(dev)
(refresh)
(start-dev)
(resetpost)
(api/database)
api/database
(assoc {} :a "a")
(stop-dev)
(refresh)
(start-dev)
(keyword 1)
(keyword 5)
(key 5)
(keyword "1")
(str 1)
(stop-dev)
(refresh)
(start-dev)
(dev)
(Docs keys)
(doc keys)
(interleave [1 1 1 1] [2 2 2 2] [3 3 3 3])
(interleave [[1 1] [1 1]] [[2 2] [2 2]] [[3 3] [3 3]])
(stop-dev)
(refresh)
 
(refresh)
(start-dev)
(refresh)
(stop-dev)
(start-dev)
(stop-dev)
(start-dev)
(dev)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(keyword :1)
(ke)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(api/database)
api/database
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
api/database
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
api/database
(stop-dev)
(refresh)
(start-dev)
(map assoc {} {:1 {} :2 {}})
(map assoc {:1 {} :2 {}} {})
(map assoc {:1 {} :2 {}} {:3 {}})
(map assoc {:1 {} :2 {}} :a)
(map assoc {:1 {} :2 {}} :a a)
(map assoc {:1 {} :2 {}} :a 2)
(keys {:1 {} :2 {}})
(keys {:1 {:a "a"} :2 {:b "b"}})
(def a (keys {:1 {:a "a"} :2 {:b "b"}}))
(a {:1 {:a "a"} :2 {:b "b"}})
a
(map a)
(hashmap a)
(map? a)
(into(sorted-map)a)
a
(:a {:a "a" :b "b"})
(find {:a "a" :b "b"} :a)
(assoc {} (find {:a "a" :b "b"} :a))
(map #(assoc {} %) (find {:a "a" :b "b"} :a))
(conj {} (find {:a "a" :b "b"} :a))
(conj {} (find {:a "a" :b "b"} :a :b))
(:1 api/samplepost)
(stop-dev)
(refresh)
(start-dev)
(resetpost)
(stop-dev)
(refresh)
(start-dev)
(keyword post-numbering)
(keyword api/post-numbering)
(keyword api/@post-numbering)
(start-dev)
(stop-dev)
api/postnumbering
(refresh)
api/post-numbering
api/@post-numbering
@api/post-numbering
(refresh)
(start-dev)
(keyword @api/post-numbering)
(stop-dev)
(refresh)
(keyword @api/post-numbering)
@api/post-numbering
(refresh)
(start-dev)
(resetpost)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(dev)
(refresh)
(start-dev)
(refresh)
(dev)
(start-dev)
(stop-dev)
api/server
sever
server
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(stop-dev)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(defn kampret (atom 1))
(defonce kampret (atom 1))
(swap! kampret inc)
(swap! @kampret inc)
kampret
@kampret
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(nil? {})
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(dev)
(start-dev)
(stop-dev)
(dev)
(start-dev)
(stop-dev)
(dev)
(start-dev)
(stop-dev)
(refresh)
clear
(refresh)
(start-dev)
(dev)
(refresh)
(start-dev)
(dev)
(start-dev)
(stop-dev)
(start-dev)
(stop-dev)
(refresh)
(stop-dev)
(start-dev)
(stop-dev)
(dev)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(start-dev)
(stop-dev)
(refresh)
(dbdev)
(refresh)
(devdb)
(dbdev)
(exitdbdev)
(dbdev)
database
(exitdbdev)
(refresh)
(dbdev)
db/database
(:conn db/database)
(exitdbdev)
(refresh)
(dbdev)
(:conn database)
conn
(initschema database)
(initcontent database)
(getallpost database)
(getallpost)
(getallpost database)
(refresh)
(getallpost database)
(refresh)
(db-get-all)
(refresh)
(db-get-all)
(refresh)
(getallpost database)
(refresh)
(getallpost database)
(initdb)
(getallpost database)
(refresh)
(initdb)
(getallpost database)
(dbdev)
(initdb)
(refresh)
(dbdev)
(initdb)
(getallpost)
(refresh)
(getallpost)
(getallpost database)
(dbdev)
(getallpost)
(source getallpost)
(dbdev)
(getallpost)
(refresh)
(getallpost)
(initdb)
(getallpost)
(count (getallpost))
(refresh)
(count (getallpost database))
(getallpost database)
(refresh)
(getallpost database)
(refresh)
(initdb database)
(getallpost database)
(dbdev)
(initdb database)
(getallpost database)
(refresh)
(getallpost database)
database
(q-allpost)
(q-allpost database)
(q-allpost conn)
(initdb database)
(q-allpost conn)
(q-allpost databse)
(q-allpost database)
(getallpost database)
database
(refresh)
(getallpost database)
(q-allpost database)
(initdb database)
(q-allpost database)
(getallpost database)
(q-allpost database)
(:conn database)
(q-allpost database)
(map transformit(q-allpost database))
(refresh)
(initdb)
(initdb database)
(map transformit(q-allpost database))
(q-allpost database)
(map transformit(q-allpost database))
(getallpost database)
(refresh)
(initdb database)
(getallpost database)
(assoc {} {:a "a"})
(assoc {} :1 {:a "a"})
(getallpost database)
((getallpost database) 1)
((getallpost database) 2)
(nth 1 (getallpost database))
(apply {} (getallpost database))
(apply vector (getallpost database))
(map #(assoc {} :1 %) (getallpost database))
(refresh)
(initdb database)
(getallpost database)
(keyword #uuid "58ec737b-3fd0-44c2-b8da-91145d835e1e")
(keyword "58ec737b-3fd0-44c2-b8da-91145d835e1e")
(str #uuid "58ec737b-3fd0-44c2-b8da-91145d835e1e")
(apply keyword #uuid "58ec737b-3fd0-44c2-b8da-91145d835e1e")
(refresh)
(initdb database)
(getallpost database)
(map transformit (q-allpost database))
(flatten (getallpost database))
(map flatten (getallpost database))
(flatten (getallpost database))
(into (sorted-map) (getallpost database))
(refresh)
(exitdbdev)
(refresh)
(atomdev)
(getallpost database)
(addsample database)
(getallpost database)
(exitdbdev)
(refresh)
(dev)
(start-dev)
(stop-dev)
(refresh)
(exitdev)
(datomicdev)
(refresh)
(getallpost database)
(initschema database)
(addsample database)
(q-squuid database "58ec802e-cdd7-4616-86d5-8df1e5fe08c4")
(q-squuid database 58ec802e-cdd7-4616-86d5-8df1e5fe08c4)
(q-squuid database #uuid 58ec802e-cdd7-4616-86d5-8df1e5fe08c4)
(q-squuid database 58ec802e-cdd7-4616-86d5-8df1e5fe08c4)
(q-squuid database #uuid "58ec802e-cdd7-4616-86d5-8df1e5fe08c4")
(refresh)
(initschema database)
(addsample database)
(getallpost database)
(refresh)
(initschema database)
(addsample database)
(getallpost database)
(refresh)
